
import java.awt.*; // Fournit des classes pour la gestion des √©l√©ments graphiques (images, couleurs, tailles, etc.)
import java.awt.event.*;// Permet la gestion des √©v√©nements comme les clics, les frappes clavier, et les temporisations
import java.util.ArrayList;
import java.util.HashSet; // Collection qui stocke des objets uniques, utile pour g√©rer des ensembles de murs, de nourriture, etc.
import java.util.Random; // G√©n√©rateur de nombres al√©atoires, utilis√© ici pour les d√©placements al√©atoires des fant√¥mes
import javax.swing.*; // Biblioth√®que Swing, utilis√©e pour cr√©er des interfaces graphiques (panneaux, timers, images)
import java.util.List; // Importe l'interface List
import java.util.ArrayList; // Importe la classe ArrayList

// La classe principale du programme, repr√©sentant l'ensemble du jeu Pac-Man
public class PacMan extends JPanel implements ActionListener, KeyListener {
    //*Remarque : `JPanel` est un conteneur graphique, et `ActionListener` / `KeyListener` sont des interfaces
    // qui permettent de r√©pondre aux √©v√©nements comme les entr√©es clavier ou les temporisations.
    //private String playerName;
    //private String playerSurname;
   
 // Classe interne repr√©sentant un bloc sur le plateau de jeu (mur, nourriture, Pac-Man ou fant√¥me)


    class Block {
        int x;//position d'un objet en x
        int y; //position d'un objet en y
        int width; // largeur d'un bloc
        int height; // hauteur d'un bloc 
        Image image;  // Image associ√©e au bloc pour l'affichage graphique

        // Position initiale du bloc pour r√©initialisation 
        int startX;
        int startY;

        char direction = 'U'; // U D L R // Direction actuelle ('U' = up/haut, 'D' = down/bas, 'L' = left/gauche, 'R' = right/droite)

         // Vitesse actuelle du bloc dans les directions X et Y
        int velocityX = 0;
        int velocityY = 0;

        // Constructeur pour initialiser un bloc avec ses propri√©t√©s (image, position, dimensions)
        Block(Image image, int x, int y, int width, int height) {
            this.image = image;
            this.x = x;
            this.y = y;
            this.width = width;
            this.height = height;
            this.startX = x;
            this.startY = y;
        }

        // M√©thode : Met √† jour la direction du pacman ou fant√¥me et v√©rifie les collisions avec les murs
        void updateDirection(char direction) {
            char prevDirection = this.direction; // Stocke la direction pr√©c√©dente pour la restaurer en cas de collision
            this.direction = direction; // Met √† jour la direction actuelle
            updateVelocity(); // Recalcule la vitesse en fonction de la nouvelle direction

            // D√©place le bloc en fonction de la vitesse calcul√©e
            this.x += this.velocityX;
            this.y += this.velocityY;

            // V√©rifie si le bloc entre en collision avec l'un des murs
            for (Block wall : walls) { // Parcourt tous les murs du plateau
                if (collision(this, wall)) { // D√©tecte une collision avec un mur
                    this.x -= this.velocityX; // Annule le d√©placement en X
                    this.y -= this.velocityY;// Annule le d√©placement en Y
                    this.direction = prevDirection;  // R√©initialise la direction √† celle pr√©c√©dente
                    updateVelocity();// Recalcule la vitesse en cons√©quence
                }
            }
        }

        // M√©thode : Met √† jour la vitesse (`velocityX` et `velocityY`) en fonction de la direction
        void updateVelocity() {
            if (this.direction == 'U') {  // Si la direction est "up" (haut)
                this.velocityX = 0; // Pas de d√©placement horizontal
                this.velocityY = -tileSize/4; // D√©placement vers le haut (n√©gatif sur l'axe Y)
            }
            else if (this.direction == 'D') {
                this.velocityX = 0;
                this.velocityY = tileSize/4;
            }
            else if (this.direction == 'L') {
                this.velocityX = -tileSize/4;
                this.velocityY = 0;
            }
            else if (this.direction == 'R') {
                this.velocityX = tileSize/4;
                this.velocityY = 0;
            }
            //tileSize/4 signifie que la vitesse est un quart de la taille d'un "tile" (case).
        }

        // M√©thode : R√©initialise la position du bloc √† ses coordonn√©es de d√©part
        void reset() {
            this.x = this.startX;
            this.y = this.startY;
        }
    }

// Dimensions du plateau de jeu
private int rowCount = 19;  // Avant c'√©tait 21, maintenant c'est 20
private int columnCount = 19;  // La largeur reste 19 colonnes
private int tileSize = 32;  // Chaque case fait 32 pixels

private int boardWidth = columnCount * tileSize;  // Largeur totale du jeu
private int boardHeight = rowCount * tileSize;  // Hauteur totale du jeu


    private Image wallImage;
    private Image blueGhostImage;
    private Image orangeGhostImage;
    private Image pinkGhostImage;
    private Image redGhostImage;

    private Image pacmanUpImage;
    private Image pacmanDownImage;
    private Image pacmanLeftImage;
    private Image pacmanRightImage;
    private Image cherryImage; // üçí Image des cerises
    private Image blackWallImage;



    //X = wall, O = skip, P = pac man, ' ' = food
    //Ghosts: b = blue, o = orange, p = pink, r = red
    private String[] tileMap = {
        "XXXXXXXXXXXXXXXXXXX",
        "X        X        X",
        "X XX XXX X XXX XX X",
        "X                 X",
        "X XX X XXXXX X XX X",
        "X    X       X    X",
        "XXXX XXXX XXXX XXXX",
        "XOOX X       X XOOX",
        "XXXX X XXrXX X XXXX",
        "X       bpo       X",
        "XXXX X XXXXX X XXXX",
        "XOOX X       X XOOX",
        "XXXX X XXXXX X XXXX",
        "X        X        X",
        "X XX XXX X XXX XX X",
        "X  X     P     X  X",
        "XX X X XXXXX X X XX",
        "X    X   X   X    X",
        "                   ", // ‚úÖ Aucune case de mur ici
        "                   "  // ‚úÖ Aucune case de mur ici
    };
    

    
    // Structures de donn√©es pour stocker les blocs du jeu
    HashSet<Block> walls; // Ensemble des blocs repr√©sentant les murs
    HashSet<Block> foods;
    HashSet<Block> ghosts;
    Block pacman;

    Timer gameLoop; // Timer pour g√©rer les mises √† jour du jeu √† intervalle r√©gulier
    char[] directions = {'U', 'D', 'L', 'R'}; //up down left right
    Random random = new Random();// G√©n√©rateur al√©atoire pour les mouvements des fant√¥mes
    int score = 0;  // Score du joueur
    int lives = 3; // Nombre de vies restantes
    boolean gameOver = false; // Indique si le jeu est termin√©

    private JButton exitButton;

    // Constructeur de la classe PacMan
    PacMan() {
        //this.playerName = name;
        //this.playerSurname = surname;
        // D√©finit la taille du panneau de jeu en fonction de la largeur et de la hauteur du plateau
        setPreferredSize(new Dimension(boardWidth, boardHeight));
        // D√©finit le fond d'√©cran du jeu en noir
        setBackground(Color.BLACK);
        // Ajoute un √©couteur de clavier pour d√©tecter les touches press√©es
        addKeyListener(this);
        // Rend le panneau focusable pour capturer les √©v√©nements clavier
        setFocusable(true);
        //this.setLayout(new BorderLayout());
        // Cr√©er un JPanel pour le bouton "Exit"
       // JPanel bottomPanel = new JPanel();
        //bottomPanel.setLayout(new FlowLayout(FlowLayout.LEFT)); // Aligner le bouton √† gauche

        this.setLayout(null);

        // Cr√©er le bouton "Exit"
        exitButton = new JButton("Exit");
        exitButton.setBounds(boardWidth - 200, boardHeight - 40, 80, 30); //
        this.add(exitButton);
        this.setVisible(true);

       // bottomPanel.add(exitButton);

        // Ajouter le panel avec le bouton "Exit" en bas
       // this.add(bottomPanel, BorderLayout.SOUTH);

        // Afficher la fen√™tre
       // this.pack();
        this.setVisible(true);

        //load images
        wallImage = new ImageIcon(getClass().getResource("./wall.png")).getImage();
        blueGhostImage = new ImageIcon(getClass().getResource("./blueGhost.png")).getImage();
        orangeGhostImage = new ImageIcon(getClass().getResource("./orangeGhost.png")).getImage();
        pinkGhostImage = new ImageIcon(getClass().getResource("./pinkGhost.png")).getImage();
        redGhostImage = new ImageIcon(getClass().getResource("./redGhost.png")).getImage();

        pacmanUpImage = new ImageIcon(getClass().getResource("./pacmanUp.png")).getImage();
        pacmanDownImage = new ImageIcon(getClass().getResource("./pacmanDown.png")).getImage();
        pacmanLeftImage = new ImageIcon(getClass().getResource("./pacmanLeft.png")).getImage();
        pacmanRightImage = new ImageIcon(getClass().getResource("./pacmanRight.png")).getImage();
        cherryImage = new ImageIcon(getClass().getResource("./cherry.png")).getImage();
        blackWallImage = new ImageIcon(getClass().getResource("./blackWall.png")).getImage();


        // Charge la carte initiale du jeu √† partir des donn√©es du tableau
        loadMap();

        // Initialise une direction al√©atoire pour chaque fant√¥me
        for (Block ghost : ghosts) {
            char newDirection = directions[random.nextInt(4)];
            ghost.updateDirection(newDirection);
        }
         // Configure la boucle principale du jeu avec un intervalle de 50ms entre chaque frame (20 FPS)
        gameLoop = new Timer(50, this); //20fps (1000/50)
        // D√©marre la boucle de jeu
        gameLoop.start();

    }

    // M√©thode pour charger la carte du jeu
    public void loadMap() {
        // Initialise les ensembles de murs, de nourriture et de fant√¥mes
        walls = new HashSet<>();
        foods = new HashSet<>();
        ghosts = new HashSet<>();
    
        // Parcourt chaque ligne et colonne de la carte
        for (int r = 0; r < rowCount; r++) {
            for (int c = 0; c < columnCount; c++) {
                String row = tileMap[r]; // R√©cup√®re la ligne actuelle de la carte
                char tileMapChar = row.charAt(c); // Caract√®re repr√©sentant un type d'objet (mur, nourriture, fant√¥me, etc.)
    
                // Calcule les coordonn√©es de l'objet en fonction de sa position sur la carte
                int x = c * tileSize;
                int y = r * tileSize;
    
                // V√©rifie quel type d'objet repr√©sente le caract√®re
                if (tileMapChar == 'X') { // Mur bleu
                    Block wall = new Block(wallImage, x, y, tileSize, tileSize);
                    walls.add(wall);
                } 
                else if (tileMapChar == 'b') { // Fant√¥me bleu
                    Block ghost = new Block(blueGhostImage, x, y, tileSize, tileSize);
                    ghosts.add(ghost);
                } 
                else if (tileMapChar == 'o') { // Fant√¥me orange
                    Block ghost = new Block(orangeGhostImage, x, y, tileSize, tileSize);
                    ghosts.add(ghost);
                } 
                else if (tileMapChar == 'p') { // Fant√¥me rose
                    Block ghost = new Block(pinkGhostImage, x, y, tileSize, tileSize);
                    ghosts.add(ghost);
                } 
                else if (tileMapChar == 'r') { // Fant√¥me rouge
                    Block ghost = new Block(redGhostImage, x, y, tileSize, tileSize);
                    ghosts.add(ghost);
                } 
                else if (tileMapChar == 'P') { // Pac-Man
                    pacman = new Block(pacmanRightImage, x, y, tileSize, tileSize);
                } 
                else if (tileMapChar == ' ' && r < rowCount - 2) { // Nourriture blanche (PAS sur les 2 derni√®res lignes)
                    Block food = new Block(null, x + 14, y + 14, 4, 4);
                    foods.add(food);
                }
            }
        }
    
        // üî• Ajout de murs noirs invisibles sur les 2 derni√®res lignes
        for (int r = rowCount - 2; r < rowCount; r++) { // Parcourt les 2 derni√®res lignes
            for (int c = 0; c < columnCount; c++) {
                int x = c * tileSize;
                int y = r * tileSize;
                Block blackWall = new Block(null, x, y, tileSize, tileSize); // Mur invisible
                walls.add(blackWall);
            }
        }
    }
    
    
    

    // M√©thode pour dessiner les √©l√©ments du jeu
    public void paintComponent(Graphics g) {
        super.paintComponent(g);// Nettoie l'√©cran avant de dessiner
        draw(g);// Appelle la m√©thode de dessin des √©l√©ments
    }

    public void draw(Graphics g) {
        // üçí Dessiner les cerises (vies restantes)
        for (int i = 0; i < lives; i++) {
            g.drawImage(cherryImage, i * 30 + 10, boardHeight - 40, 24, 24, null);
        }
    
        // Dessine Pac-Man √† ses coordonn√©es actuelles
        g.drawImage(pacman.image, pacman.x, pacman.y, pacman.width, pacman.height, null);
    
        // Dessine les fant√¥mes
        for (Block ghost : ghosts) {
            g.drawImage(ghost.image, ghost.x, ghost.y, ghost.width, ghost.height, null);
        }
    
        // Dessine les murs 
        for (Block wall : walls) {
            g.drawImage(wall.image, wall.x, wall.y, wall.width, wall.height, null);
        }
    
        // Dessine la nourriture sous forme de petits rectangles blancs
        g.setColor(Color.WHITE);
        for (Block food : foods) {
            g.fillRect(food.x, food.y, food.width, food.height);
        }
    
        // Dessine les cerises
        for (Block cherry : cherries) {
            g.drawImage(cherry.image, cherry.x, cherry.y, cherry.width, cherry.height, null);
        }
    
        // üèÜ Affiche le score en bas √† droite
        g.setFont(new Font("Arial", Font.PLAIN, 18));
        g.setColor(Color.WHITE);
        g.drawString("Score: " + score, boardWidth - 100, boardHeight - 10);
    
        // üíÄ Affichage du "Game Over" en GRAND au milieu
        if (gameOver) {
            g.setFont(new Font("Arial", Font.BOLD, 50));
            g.setColor(Color.RED);
            String message = "GAME OVER";
            int textWidth = g.getFontMetrics().stringWidth(message);
            int textHeight = g.getFontMetrics().getHeight();
            g.drawString(message, (boardWidth - textWidth) / 2, (boardHeight - textHeight) / 2);
        }
    }
    
private List<Block> cherries = new ArrayList<>(); // Liste des cerises
private boolean cherrySpawned = false; // Pour √©viter de faire appara√Ætre plusieurs cerises

private void spawnCherry() {
    if (!foods.isEmpty()) {
        List<Block> foodList = new ArrayList<>(foods); // Convertir le HashSet en ArrayList
        Random rand = new Random();
        int randomIndex = rand.nextInt(foodList.size()); // Index al√©atoire
        Block randomFood = foodList.get(randomIndex); // Pastille al√©atoire

        // Cr√©e une cerise √† la position de la pastille
        Block cherry = new Block(cherryImage, randomFood.x, randomFood.y, 20, 20);
        cherries.add(cherry); // Ajoute la cerise √† la liste
        foods.remove(randomFood); // Retire la pastille de la liste des pastilles
    }
}



    // M√©thode pour d√©placer Pac-Man et les fant√¥mes
    public void move() {
        // D√©placement de Pac-Man selon sa v√©locit√© actuelle
        pacman.x += pacman.velocityX;
        pacman.y += pacman.velocityY;
    
        // V√©rification des collisions avec les murs
        for (Block wall : walls) {
            if (collision(pacman, wall)) {
                pacman.x -= pacman.velocityX;
                pacman.y -= pacman.velocityY;
                break;
            }
        }
    
        // V√©rification des collisions avec les fant√¥mes
        for (Block ghost : ghosts) {
            if (collision(ghost, pacman)) {
                lives -= 1;
                if (lives == 0) {
                    gameOver = true;
                    return;
                }
                resetPositions();
            }
    
            if (ghost.y == tileSize * 9 && ghost.direction != 'U' && ghost.direction != 'D') {
                ghost.updateDirection('U');
            }
            ghost.x += ghost.velocityX;
            ghost.y += ghost.velocityY;
    
            for (Block wall : walls) {
                if (collision(ghost, wall) || ghost.x <= 0 || ghost.x + ghost.width >= boardWidth) {
                    ghost.x -= ghost.velocityX;
                    ghost.y -= ghost.velocityY;
                    char newDirection = directions[random.nextInt(4)];
                    ghost.updateDirection(newDirection);
                }
            }
        }
    
        // V√©rification des collisions avec la nourriture
        Block foodEaten = null;
        for (Block food : foods) {
            if (collision(pacman, food)) {
                foodEaten = food; // Enregistre la nourriture que Pacman a mang√©e
                score += 10; // Augmente le score de 10 points
            }
        }
    
        // Retirer la nourriture mang√©e de la liste
        foods.remove(foodEaten);
    
        // Si le score atteint 250 et qu'aucune cerise n'a √©t√© g√©n√©r√©e, fait appara√Ætre une cerise
        if (score >= 250 && !cherrySpawned) {
            spawnCherry();
            cherrySpawned = true; // Emp√™che la cerise de r√©appara√Ætre
            
        }
    
        // Si toute la nourriture a √©t√© mang√©e, on recharge la carte et r√©initialise les positions
        if (foods.isEmpty()) {
            loadMap();
            resetPositions();
        }
        // V√©rification des collisions avec les cerises
Block cherryEaten = null;
for (Block cherry : cherries) {
    if (collision(pacman, cherry)) {
        cherryEaten = cherry; // Enregistre la cerise que Pacman a mang√©e
        score += 100; // Augmente le score de 100 points (ou une autre valeur)
    }
}

// Retirer la cerise mang√©e de la liste
cherries.remove(cherryEaten);
    }

    // M√©thode pour v√©rifier les collisions entre deux objets (Pacman ou un fant√¥me)
    public boolean collision(Block a, Block b) {
        return  a.x < b.x + b.width &&
                a.x + a.width > b.x &&
                a.y < b.y + b.height &&
                a.y + a.height > b.y;
    }

    // R√©initialise les positions de Pacman et des fant√¥mes
    public void resetPositions() {
        pacman.reset(); // R√©initialise Pacman √† sa position de d√©part
        pacman.velocityX = 0;  // R√©initialise la vitesse de Pacman
        pacman.velocityY = 0; // R√©initialise la vitesse de Pacman
        for (Block ghost : ghosts) {
            ghost.reset(); // R√©initialise la position du fant√¥me
            char newDirection = directions[random.nextInt(4)]; // Choisit une nouvelle direction al√©atoire pour le fant√¥me
            ghost.updateDirection(newDirection);  // Met √† jour la direction du fant√¥me
        }
    }

    //G√©rer les √©v√©nements d'action du jeu
    @Override
    public void actionPerformed(ActionEvent e) {
        move(); // Effectue le d√©placement de Pacman et des fant√¥mes
        repaint(); // Rafra√Æchit l'affichage du jeu
        if (gameOver) { // Si la partie est termin√©e, arr√™te la boucle du jeu
            gameLoop.stop();
        }
    }


    //Gestion des √©v√©nements du clavier
    @Override
    public void keyTyped(KeyEvent e) {
    // Cette m√©thode est appel√©e lorsque l'utilisateur appuie sur une touche du clavier.
    // Cependant, dans ce code, elle n'est pas utilis√©e, donc elle reste vide.
    }

    @Override
    public void keyPressed(KeyEvent e) {
         // Cette m√©thode est appel√©e d√®s qu'une touche est enfonc√©e.
         // Cependant, dans ce code, elle n'est pas utilis√©e, donc elle reste vide.
    }

    @Override
    public void keyReleased(KeyEvent e) {
         // Cette m√©thode est appel√©e lorsque l'utilisateur rel√¢che une touche du clavier.
        if (gameOver) { // Si le jeu est termin√© (gameOver est vrai)
            loadMap();  // Recharge la carte du jeu, probablement pour red√©marrer le niveau ou le jeu
            resetPositions(); // R√©initialise les positions de Pacman et des fant√¥mes
            lives = 3;  // R√©initialise le nombre de vies √† 3 
            score = 0; // R√©initialise le score √† 0
            gameOver = false; // Met fin √† l'√©tat de "game over"
            gameLoop.start();  // Red√©marre la boucle du jeu (d√©marre l'animation et la logique du jeu)
        }

        // Gestion des d√©placements de Pacman en fonction des touches directionnelles
        // System.out.println("KeyEvent: " + e.getKeyCode());
        if (e.getKeyCode() == KeyEvent.VK_UP) {
            pacman.updateDirection('U'); // Si la touche "fl√®che haut" est press√©e, Pacman se d√©place vers le haut
        }
        else if (e.getKeyCode() == KeyEvent.VK_DOWN) {
            pacman.updateDirection('D');  // Si la touche "fl√®che bas" est press√©e, Pacman se d√©place vers le bas
        }
        else if (e.getKeyCode() == KeyEvent.VK_LEFT) {
            pacman.updateDirection('L'); // Si la touche "fl√®che gauche" est press√©e, Pacman se d√©place vers la gauche
        }
        else if (e.getKeyCode() == KeyEvent.VK_RIGHT) {
            pacman.updateDirection('R');
        }


        // Change l'image de Pacman en fonction de sa direction actuelle.
    // Cela est fait pour donner l'impression que Pacman "regarde" dans la direction qu'il prend.
        if (pacman.direction == 'U') {
            pacman.image = pacmanUpImage;
        }
        else if (pacman.direction == 'D') {
            pacman.image = pacmanDownImage;
        }
        else if (pacman.direction == 'L') {
            pacman.image = pacmanLeftImage;
        }
        else if (pacman.direction == 'R') {
            pacman.image = pacmanRightImage;
        }
    }
}



